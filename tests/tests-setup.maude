load ../src/proof-generator.maude

mod PRETTY is
    pr PROOF-GENERATION .
    
    ops a b c tru fals : -> TermPattern .
    ops f g h h' : -> TermPattern .
    ops x y z x' : -> EVar .
    op _-->_ : TermPattern TermPattern -> TermPattern .
    op _===_ : TermPattern TermPattern -> TermPattern .
    op _`[_`] : TermPattern TermPattern -> TermPattern .

    vars N : NzNat .
    vars Tp Tp' F Tp1 Tp2 : TermPattern .
    vars Pr : ProofRule .
    vars P1 P2 : Proof .

    op pretty : Proof -> Proof [format(nm d)] .
    eq pretty(.Proof) = .Proof .
    ceq pretty((P1 P2)) = pretty(P1) pretty(P2) if (P1 =/= .Proof) /\ (P2 =/= .Proof) .
    eq pretty((N) Tp Pr ;) = (N) prettyTermPattern(Tp) Pr ; .

    op prettyTermPattern : TermPattern -> TermPattern .
    eq prettyTermPattern(\imp(\bot, \bot)) = tru .  *** true
    eq prettyTermPattern(\bot) = fals .  *** true
    eq prettyTermPattern(\imp(Tp1, Tp2)) = prettyTermPattern(Tp1) --> prettyTermPattern(Tp2) .
    eq prettyTermPattern(\eq(Tp1, Tp2)) = prettyTermPattern(Tp1) === prettyTermPattern(Tp2) .
    eq prettyTermPattern(\app(Tp1, Tp2)) = prettyTermPattern(Tp1) [ prettyTermPattern(Tp2) ] .
    eq prettyTermPattern(Tp1 and Tp2) = prettyTermPattern(Tp1) and prettyTermPattern(Tp2) .


    eq prettyTermPattern(\evar(1)) = x .
    eq prettyTermPattern(\evar(2)) = y .
    eq prettyTermPattern(\evar(3)) = z .
    eq prettyTermPattern(\evar(10)) = x' .

    eq prettyTermPattern(\symb(10)) = a .
    eq prettyTermPattern(\symb(11)) = b .
    eq prettyTermPattern(\symb(12)) = c .

    eq prettyTermPattern(\symb(100)) = f .
    eq prettyTermPattern(\symb(101)) = g .
    eq prettyTermPattern(\symb(102)) = h .
    eq prettyTermPattern(\symb(7)) = h' .

endm
***(
mod 2AML is
  protecting META-LEVEL .
  protecting SYNTAX .

  sort SymbolTable .
  op `(_`,_`) : Qid TermPattern -> SymbolTable [ctor] .
  op _;_ : SymbolTable SymbolTable -> SymbolTable [ctor assoc comm] .
  op fst : SymbolTable -> Qid .
  op snd : SymbolTable -> TermPattern .

  
  var F VN CN : Qid .
  var S : String .
  vars T T1 T2 : Term .
  var TL TL' OVL OVL' : TermList .
  vars C C' : Constant .
  vars V V' : Variable .
  var ST : SymbolTable .
  vars PT PT' PT1 PT2 : TermPattern .

  eq fst((F, PT)) = F .
  eq snd((F, PT)) = PT .
  
  op st : -> SymbolTable .
  eq st = ('f, \symb(100)) ; ('aa, \symb(10)) ; ('xx, \evar(1)) ; ('g, \symb(101)) .

  op 2aml : Term -> Term .
  op 2amlVar : String Type -> Variable .
  op 2amlConst : String Type -> Constant .
  
  ceq 2aml(V) = upTerm(PT)
   if (VN, PT) ; ST := st
   /\ VN == getName(V) .
 ceq 2aml(C) =  upTerm(PT)
  if (CN, PT) ; ST := st
   /\ CN == getName(C) .
 ceq 2aml(F[T]) = '\app[upTerm(PT), 2aml(T)]
  if (F, PT) ; ST := st .
  eq 2aml(F[TL, T]) = '\app[2aml(F[TL]), 2aml(T)] .

  sort s .
  op aa : -> s .
  op f : s -> s .
  op g : s s -> s . 
  vars xx X : s .

  op 2aml : s -> TermPattern .
  eq 2aml(X) =  downTerm(2aml(upTerm(X)), \bot) .
 
endm

red 2aml(aa) . 
red 2aml(xx) .
red 2aml(f(xx)) .
red 2aml(f(f(aa))).
red 2aml(g(aa, xx)).
red 2aml(g(f(aa), xx)).

mod TEST is
  pr PRETTY .
  pr 2AML .
  var xx : s .
endm

*** symbol clash: f(a) = g(xx, aa)
rew in TEST : pretty(gen-proof1(2aml(f(aa)), 2aml(g(xx, aa)))) .
***)