load ../src/proof-generator.maude

mod PRETTY is
    pr PROOF-GENERATION .
    
    ops a b c tru fals : -> TermPattern .
    ops f g h h' : -> TermPattern .
    ops x y z x' : -> EVar .
    op _-->_ : TermPattern TermPattern -> TermPattern .
    op _===_ : TermPattern TermPattern -> TermPattern .
    op _`[_`] : TermPattern TermPattern -> TermPattern .

    vars N : NzNat .
    vars Tp Tp' F Tp1 Tp2 : TermPattern .
    vars Pr : ProofRule .
    vars P1 P2 : Proof .

    op pretty : Proof -> Proof [format(nm d)] .
    eq pretty(.Proof) = .Proof .
    ceq pretty((P1 P2)) = pretty(P1) pretty(P2) if (P1 =/= .Proof) /\ (P2 =/= .Proof) .
    eq pretty((N) Tp Pr ;) = (N) prettyTermPattern(Tp) Pr ; .

    op prettyTermPattern : TermPattern -> TermPattern .
    eq prettyTermPattern(\imp(\bot, \bot)) = tru .  *** true
    eq prettyTermPattern(\bot) = fals .  *** true
    eq prettyTermPattern(\imp(Tp1, Tp2)) = prettyTermPattern(Tp1) --> prettyTermPattern(Tp2) .
    eq prettyTermPattern(\eq(Tp1, Tp2)) = prettyTermPattern(Tp1) === prettyTermPattern(Tp2) .
    eq prettyTermPattern(\app(Tp1, Tp2)) = prettyTermPattern(Tp1) [ prettyTermPattern(Tp2) ] .
    eq prettyTermPattern(Tp1 and Tp2) = prettyTermPattern(Tp1) and prettyTermPattern(Tp2) .


    eq prettyTermPattern(\evar(1)) = x .
    eq prettyTermPattern(\evar(2)) = y .
    eq prettyTermPattern(\evar(3)) = z .
    eq prettyTermPattern(\evar(10)) = x' .

    eq prettyTermPattern(\symb(10)) = a .
    eq prettyTermPattern(\symb(11)) = b .
    eq prettyTermPattern(\symb(12)) = c .

    eq prettyTermPattern(\symb(100)) = f .
    eq prettyTermPattern(\symb(101)) = g .
    eq prettyTermPattern(\symb(102)) = h .
    eq prettyTermPattern(\symb(7)) = h' .

endm


