[1m[95mProof of:[94m (t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)))  [0m
(1)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)))) [tauto-imp-refl] ;

(2)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1))) [axiom-no-confusion-II] ;

(3)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1))) [tauto-imp-tranz,1,2] ;

(4)((threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) --> (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [axiom-no-confusion-II] ;

(5)((threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) --> (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,4] ;

(6)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,3,5] ;

(7)((store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) --> (reststore === map(mapitem(concrete-i, concrete-v), emptymap))) [axiom-no-confusion-II] ;

(8)((store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,7] ;

(9)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,6,8] ;

(10)((input(in) === input(inp1)) --> (in === inp1)) [axiom-no-confusion-II] ;

(11)((reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,10] ;

(12)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,9,11] ;

(13)((output(out) === output(out1)) --> (out === out1)) [axiom-no-confusion-II] ;

(14)((in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,13] ;

(15)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,12,14] ;

(16)((thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m))) [axiom-no-confusion-II] ;

(17)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m))) [tauto-context,16] ;

(18)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m))) [tauto-imp-tranz,15,17] ;

(19)((k(seq(x, rest)) === k(restk)) --> (seq(x, rest) === restk)) [axiom-no-confusion-II] ;

(20)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk)) [tauto-context,19] ;

(21)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk)) [tauto-imp-tranz,18,20] ;

(22)((env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) --> (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [axiom-no-confusion-II] ;

(23)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-context,22] ;

(24)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-imp-tranz,21,23] ;

(25)((id(n) === id(m)) --> (n === m)) [axiom-no-confusion-II] ;

(26)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-context,25] ;

(27)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-imp-tranz,24,26] ;

(28)((map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (restmap === concrete-restmap) and (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [axiom-no-confusion-II] ;

(29)((n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [tauto-context,28] ;

(30)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [tauto-imp-tranz,27,29] ;

(31)((mapitem(x, i) === mapitem(concrete-x, concrete-i)) --> (x === concrete-x) and (i === concrete-i)) [axiom-no-confusion-II] ;

(32)((restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk)) [tauto-context,31] ;

(33)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk)) [tauto-imp-tranz,30,32] ;

(34)((seq(x, rest) === restk) --> (restk === seq(x, rest))) [equality-symmetry] ;

(35)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-context,34] ;

(36)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-imp-tranz,33,35] ;

(37)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest))) [equality-elimination] ;

(38)((x === concrete-x) and (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest))) [tauto-context,37] ;

(39)((x === concrete-x) --> (x === concrete-x) and (x === concrete-x)) [tauto-and-expand] ;

(40)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (x === concrete-x) and (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-context,39] ;

(41)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest))) [tauto-imp-tranz,40,38] ;

(42)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest))) [tauto-imp-tranz,36,41] ;

(43)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [tauto-context,42] ;

(44)(t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> (t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [axiom-term-eq-intro] ;

(45)(t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [tauto-imp-tranz,44,43] ;
[1m[95mProof of:[94m ((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)))  [0m
(1)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest))) [tauto-imp-refl] ;

(2)((i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [equality-introduction1] ;

(3)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-context,2] ;

(4)((x === concrete-x) and (x === concrete-x) --> (x === concrete-x)) [tauto-and-simpl] ;

(5)((x === concrete-x) and (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-context,4] ;

(6)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-imp-tranz,3,5] ;

(7)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest))) [tauto-imp-tranz,1,6] ;

(8)((restk === seq(x, rest)) --> (seq(x, rest) === restk)) [equality-symmetry] ;

(9)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk)) [tauto-context,8] ;

(10)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk)) [tauto-imp-tranz,7,9] ;

(11)((x === concrete-x) and (i === concrete-i) --> (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [axiom-functional] ;

(12)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) --> (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [tauto-context,11] ;

(13)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i))) [tauto-imp-tranz,10,12] ;

(14)((restmap === concrete-restmap) and (mapitem(x, i) === mapitem(concrete-x, concrete-i)) --> (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [axiom-functional] ;

(15)((restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (mapitem(x, i) === mapitem(concrete-x, concrete-i)) --> (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-context,14] ;

(16)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-imp-tranz,13,15] ;

(17)((n === m) --> (id(n) === id(m))) [axiom-functional] ;

(18)((n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-context,17] ;

(19)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap))) [tauto-imp-tranz,16,18] ;

(20)((map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap)))) [axiom-functional] ;

(21)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (id(n) === id(m)) and (seq(x, rest) === restk) and (map(mapitem(x, i), restmap) === map(mapitem(concrete-x, concrete-i), concrete-restmap)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk)) [tauto-context,20] ;

(22)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk)) [tauto-imp-tranz,19,21] ;

(23)((seq(x, rest) === restk) --> (k(seq(x, rest)) === k(restk))) [axiom-functional] ;

(24)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) and (seq(x, rest) === restk) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m))) [tauto-context,23] ;

(25)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m))) [tauto-imp-tranz,22,24] ;

(26)((k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) --> (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [axiom-functional] ;

(27)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (k(seq(x, rest)) === k(restk)) and (env(map(mapitem(x, i), restmap)) === env(map(mapitem(concrete-x, concrete-i), concrete-restmap))) and (id(n) === id(m)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,26] ;

(28)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,25,27] ;

(29)((out === out1) --> (output(out) === output(out1))) [axiom-functional] ;

(30)((in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,29] ;

(31)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,28,30] ;

(32)((in === inp1) --> (input(in) === input(inp1))) [axiom-functional] ;

(33)((in === inp1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,32] ;

(34)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,31,33] ;

(35)((reststore === map(mapitem(concrete-i, concrete-v), emptymap)) --> (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap)))) [axiom-functional] ;

(36)((reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-context,35] ;

(37)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) [tauto-imp-tranz,34,36] ;

(38)((thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))))) [axiom-functional] ;

(39)((store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) and (thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n)) === thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))) --> (threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1))) [tauto-context,38] ;

(40)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1))) [tauto-imp-tranz,37,39] ;

(41)((threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))) === threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m)))) and (store(reststore) === store(map(mapitem(concrete-i, concrete-v), emptymap))) and (input(in) === input(inp1)) and (output(out) === output(out1)) --> (t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)))) [axiom-functional] ;

(42)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) --> (t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)))) [tauto-imp-tranz,40,41] ;

(43)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> (t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [tauto-context,42] ;

(44)((t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) === t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1))) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [axiom-term-eq-elim] ;

(45)((x === concrete-x) and (i === concrete-i) and (restmap === concrete-restmap) and (n === m) and (in === inp1) and (out === out1) and (reststore === map(mapitem(concrete-i, concrete-v), emptymap)) and (restk === seq(concrete-x, rest)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out)) --> t(threads(thread(k(restk), env(map(mapitem(concrete-x, concrete-i), concrete-restmap)), id(m))), store(map(mapitem(concrete-i, concrete-v), emptymap)), input(inp1), output(out1)) and t(threads(thread(k(seq(x, rest)), env(map(mapitem(x, i), restmap)), id(n))), store(reststore), input(in), output(out))) [tauto-imp-tranz,43,44] ;
The proof generated for input: 15_imp_with_threads_lookup_io.in has 90 lines and took 0.054 seconds.
