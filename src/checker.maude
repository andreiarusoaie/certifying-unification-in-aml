mod SYNTAX is
    pr NAT .

    sorts TermPattern EVar .
    subsort EVar < TermPattern .
    op \evar : NzNat                    -> EVar .
    op \symb : NzNat                    -> TermPattern .
    op \app  : TermPattern TermPattern  -> TermPattern .
    op \imp  : TermPattern TermPattern  -> TermPattern .
    op \bot  :                          -> TermPattern .
    op \exists : EVar TermPattern       -> TermPattern . *** this is not a term pattern

    --- derived syntax
    op _and_ : TermPattern TermPattern -> TermPattern [assoc comm prec 28] .
    op _or_ : TermPattern TermPattern -> TermPattern [assoc comm prec 30] .
    op \not  : TermPattern             -> TermPattern .
    op \eq   : TermPattern TermPattern -> TermPattern .

    --- utils
    vars X Y              : EVar .
    vars N K              : NzNat .
    vars T T1 T2 F F' Phi : TermPattern .

    --- substitution
    op _`[_/_`] : TermPattern TermPattern EVar -> TermPattern .
    eq X[T / X]                = T .
    ceq \evar(N)[T / \evar(K)] = \evar(N) if N =/= K .
    eq \symb(N)[T / X]         = \symb(N) .
    eq \bot[T / X]             = \bot .
    eq \app(T1, T2)[T / X]     = \app(T1[T / X], T2[T / X]) .
    eq \imp(T1, T2)[T / X]     = \imp(T1[T / X], T2[T / X]) .
    eq \eq(T1, T2)[T / X]      = \eq(T1[T / X], T2[T / X]) .
    eq (T1 and T2)[T / X]      = (T1[T / X]) and (T2[T / X]) .
    eq (T1 or T2)[T / X]       = (T1[T / X]) or (T2[T / X]) .
    eq \not(T1) [T / X]        = \not(T1[T / X]) .
    eq \exists(X, T1) [T / X]  = \exists(X, T1) .
    ceq \exists(Y, T1) [T / X] = \exists(Y, T1[T / X]) if not (X in fv(T)) .

    --- free vars
    sort Vars .
    subsort EVar < Vars .
    op .Vars :            -> Vars [ctor] .
    op _;_ : Vars Vars    -> Vars [ctor assoc comm id: .Vars prec 121] .

    var Vs : Vars .
    op rem : EVar Vars -> Vars .
    eq rem(X, (X ; Vs)) = rem(X, Vs) .
    eq rem(X, Vs) = Vs [owise] .

    op vars : TermPattern -> Vars .
    eq vars(\evar(N))     = \evar(N) .
    eq vars(\symb(N))     = .Vars .
    eq vars(\bot)         = .Vars .
    eq vars(\app(T1, T2)) = vars(T1) ; vars(T2) .
    eq vars(\imp(T1, T2)) = vars(T1) ; vars(T2) .
    eq vars(T1 and T2)    = vars(T1) ; vars(T2) .
    eq vars(T1 or T2)     = vars(T1) ; vars(T2) .
    eq vars(\eq(T1, T2))  = vars(T1) ; vars(T2) .
    eq vars(\not(T))      = vars(T) .

    op fv : TermPattern   -> Vars .
    eq fv(\evar(N))       = \evar(N) .
    eq fv(\symb(N))       = .Vars .
    eq fv(\bot)           = .Vars .
    eq fv(\app(T1, T2))   = fv(T1) ; fv(T2) .
    eq fv(\imp(T1, T2))   = fv(T1) ; fv(T2) .
    eq fv(T1 and T2)      = fv(T1) ; fv(T2) .
    eq fv(T1 or T2)       = fv(T1) ; fv(T2) .
    eq fv(\eq(T1, T2))    = fv(T1) ; fv(T2) .
    eq fv(\not(T))        = fv(T) .
    eq fv(\exists(X, T))  = rem(X, fv(T)) .

    vars A B : Vars .
    op _in_ :         EVar Vars -> Bool .
    eq (\evar(N)) in (\evar(N))  = true .
    ceq (\evar(N)) in (\evar(K)) = false if N =/= K .
    eq X in .Vars                = false .
    eq X in (A ; B)              = (X in A) or (X in B) .

    op isCompound : TermPattern -> Bool .
    eq isCompound(\app(F, T)) = true .
    eq isCompound(T) = false [owise] .

    op isFunctional : TermPattern -> Bool .
    eq isFunctional(\evar(N)) = true .
    eq isFunctional(\symb(N)) = true .
    eq isFunctional(\app(T1, T2))= isFunctional(T1) and isFunctional(T2) .
    eq isFunctional(T) = false [owise] .

    op check-functional-rec : TermPattern -> Bool .
    eq check-functional-rec(\imp(\eq(T1, T2) and Phi, \eq(\app(F, T1), \app(F', T2)))) =
        check-functional-rec(\imp(Phi, \eq(F, F'))) and isFunctional(F) and isFunctional(F')  .
    eq check-functional-rec(\imp(\eq(T1, T2), \eq(\app(F, T1), \app(F, T2)))) = isFunctional(F) .
    eq check-functional-rec(F) = false [owise] .

    op get-top-symbol : TermPattern -> TermPattern .
    eq get-top-symbol(\app(\symb(N), T)) = \symb(N) . 
    eq get-top-symbol(\app(F, T)) = get-top-symbol(F) .
endm

mod PROOF is
    pr SYNTAX .

    sort Proof .
    op .Proof :         -> Proof .
    op __ : Proof Proof -> Proof [assoc id: .Proof prec 45 format(d n d)] .

    sort ProofLine .
    subsort ProofLine < Proof .
    op `(_`)__; : NzNat TermPattern ProofRule -> ProofLine [prec 40] .

    sort ProofRule .
    op `[_,_,_`] : RuleName NzNat NzNat -> ProofRule .
    op `[_,_`]   : RuleName NzNat       -> ProofRule .
    op `[_`]     : RuleName             -> ProofRule .

    sort RuleName .

    op tauto-context          : -> RuleName . --- if phi -> phi' then psi and phi -> psi and phi'
    op tauto-imp-refl         : -> RuleName . --- phi -> phi
    op tauto-imp-tranz        : -> RuleName . --- if (phi1 -> phi) (phi -> phi2) then (phi1 -> phi2)
    op tauto-and-simpl        : -> RuleName . --- phi and phi -> phi 
    op tauto-and-expand       : -> RuleName . --- phi -> phi and phi
    op tauto-and-unit         : -> RuleName . --- phi and true -> phi 
    op tauto-and-exp-unit     : -> RuleName . --- phi -> phi and true
    op tauto-and-bot          : -> RuleName . --- phi and false -> false
    op tauto-bot-elim         : -> RuleName . --- bot -> phi
    op tauto-equality-id      : -> RuleName . --- phi = phi -> true 
    op tauto-equality-refl    : -> RuleName . --- true -> phi = phi
    op equality-symmetry      : -> RuleName . --- phi = phi' -> phi' = phi
    op equality-elimination   : -> RuleName . --- x = t and phi -> phi[t/x]
    op equality-introduction1 : -> RuleName . --- functional(t) /\ phi[t/x] -> x = t and phi
    op axiom-no-confusion-I   : -> RuleName . --- f == g -> \bot 
    op axiom-no-confusion-II  : -> RuleName . --- f(t) = f(t') -> f = t'
    op axiom-5.24.3-1         : -> RuleName . --- t1 and t2 -> t1 and (t1 = t2) 
    op axiom-5.24.3-2         : -> RuleName . --- t1 and (t1 = t2) -> t1 and t2
    op axiom-functional       : -> RuleName . --- isFunctional(phi)
    op occurs-check           : -> RuleName . --- x == t -> \bot if x \in vars(t) and t is not var

    op exists-intro           : -> RuleName . --- t1 or t2 = exists x.x and (x = t1 or x = t2)
    op antiunification-dec    : -> RuleName . --- 
    op exists-elim            : -> RuleName . --- 
    op exists-equiv           : -> RuleName . --- 
endm


mod CHECKER is
    pr PROOF .

    op check : Proof -> Bool .
    op _step-marker_ : Proof Proof -> Bool [format(g bn nr o)] .
    vars Pi Pi' P P' P1 P2 P3 P4 : Proof .
    var L : ProofLine .
    eq check(Pi) = (.Proof step-marker Pi) .
    eq Pi step-marker .Proof = true .
    ceq Pi step-marker (L Pi') = (Pi L) step-marker Pi' if Pi |- L .

    var X : EVar .
    vars I I1 I2 N : NzNat .
    vars Tp Tp' Tp1 Tp2 T F F' Phi : TermPattern .
    vars Pr Pr' : ProofRule .
    op _|-_ : Proof ProofLine -> Bool .

    ceq [tauto-context] :
        Pi |- (N) \imp(T and Tp1, T and Tp2) [tauto-context, I] ; = true
      if I < N /\ I \imp(Tp1, Tp2) in Pi .

    eq [tauto-and-simpl] :
        Pi |- (N) \imp(T and T, T) [tauto-and-simpl] ; = true .

    eq [tauto-and-expand] :
        Pi |- (N) \imp(T, T and T) [tauto-and-expand] ; = true .

    eq [tauto-imp-refl] : Pi |- (N) \imp(Tp, Tp) [tauto-imp-refl] ; = true .

    eq [tauto-equality-id] :
        Pi |- (N) \imp(\eq(Tp, Tp), \imp(\bot, \bot)) [tauto-equality-id] ; = true .

    eq [tauto-equality-refl] :
        Pi |- (N) \imp(\imp(\bot, \bot), \eq(Tp, Tp)) [tauto-equality-refl] ; = true .

    eq [tauto-and-unit] :
        Pi |- (N) \imp(Tp and \imp(\bot, \bot), Tp) [tauto-and-unit] ; = true .

    eq [tauto-and-exp-unit] :
        Pi |- (N) \imp(Tp, Tp and \imp(\bot, \bot)) [tauto-and-exp-unit] ; = true .

    eq [tauto-and-bot] :
        Pi |- (N) \imp(Tp and \bot, \bot) [tauto-and-bot] ; = true .

    eq [tauto-and-bot] :
        Pi |- (N) \imp(\bot, Tp) [tauto-bot-elim] ; = true .

    eq [symmetry] : Pi |- (N) \imp(\eq(Tp, Tp'), \eq(Tp', Tp)) [equality-symmetry] ; = true .

    ceq [equality-elimination] :
        Pi |- (N) \imp((\eq(X,T)) and Tp, Tp') [equality-elimination] ; = true
      if Tp' ==  Tp[T / X] .

    ceq [equality-introduction1] :
        Pi |- (N) \imp(Tp', (\eq(X,T)) and Tp) [equality-introduction1] ; = true
      if Tp' ==  Tp[T / X] /\ isFunctional(T) /\ not(X in vars(T)) .

    ceq [axiom-functional] :
        Pi |- (N) Phi [axiom-functional] ; = true if check-functional-rec(Phi) .

    ceq [axiom-no-confusion-II] :
        Pi |- (N) \imp(Tp1, Tp2) [axiom-no-confusion-II] ; = true
      if check-functional-rec(\imp(Tp2, Tp1)) .

    ceq [axiom-no-confusion-I] : 
        Pi |- (N) \imp(\eq(Tp1, Tp2), \bot) [axiom-no-confusion-I] ; = true
      if isFunctional(Tp1) /\ isFunctional(Tp2) /\ not(get-top-symbol(Tp1) == get-top-symbol(Tp2)) .

    eq [axiom-5.24.3-1] :
        Pi |- (N) \imp(Tp1 and Tp2, Tp1 and \eq(Tp1, Tp2)) [axiom-5.24.3-1] ; = true .
    eq [axiom-5.24.3-2] :
        Pi |- (N) \imp(Tp1 and \eq(Tp1, Tp2), Tp1 and Tp2) [axiom-5.24.3-2] ; = true .

    ceq [oc] : Pi |- (N) \imp(\eq(X, Tp), \bot) [occurs-check] ; = true
      if X in vars(Tp) /\ isCompound(Tp) .

    ceq [tauto-imp-tranz] :
        Pi |- (N) \imp(Tp1, Tp2) [tauto-imp-tranz, I1, I2] ; = true
      if I1 < N /\ I2 < N /\
         (P1 ((I1) \imp(Tp1, T) Pr  ;) P2) := Pi /\ 
         (P3 ((I2) \imp(T, Tp2) Pr' ;) P4) := Pi .

    eq [exists-intro] :
        Pi |- (N) \eq(Tp1 or Tp2, \exists(X, X and (\eq(X, Tp1) or \eq(X, Tp2)))) [exists-intro] ; = true .

    --- helpers
    op __in_ : NzNat TermPattern Proof -> Bool .
    eq N Tp in (P ((N) Tp Pr ;) P') = true .
    eq N Tp in Pi = false [owise] .

    op check-impl : NzNat NzNat TermPattern Proof -> Bool .
    ceq check-impl(I1, I2, Tp, Pi) = (Tp1 == \imp(Tp2, Tp))
      if (P1 ((I1) Tp1 Pr  ;) P2) := Pi /\ (P3 ((I2) Tp2 Pr' ;) P4) := Pi .
endm
