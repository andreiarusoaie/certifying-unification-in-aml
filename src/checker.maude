mod SYNTAX is
    pr NAT .

    sorts TermPattern EVar .
    subsort EVar < TermPattern .
    op \evar : NzNat                    -> EVar .
    op \symb : NzNat                    -> TermPattern .
    op \app  : TermPattern TermPattern  -> TermPattern .
    op \imp  : TermPattern TermPattern  -> TermPattern .
    op \bot  :                          -> TermPattern .

    --- derived syntax
    op _and_ : TermPattern TermPattern -> TermPattern [assoc comm prec 28] .
    op _or_  : TermPattern TermPattern -> TermPattern [assoc comm prec 30] .
    op \not  : TermPattern             -> TermPattern .
    op \eq   : TermPattern TermPattern -> TermPattern .
    op \eqv  : TermPattern TermPattern -> TermPattern [comm] .

    --- utils
    vars X Y              : EVar .
    vars N K              : NzNat .
    vars T T1 T2 F F' Phi : TermPattern .

    --- substitution
    op _`[_/_`] : TermPattern TermPattern EVar -> TermPattern [memo] .
    eq X[T / X]                = T .
    ceq \evar(N)[T / \evar(K)] = \evar(N) if N =/= K .
    eq \symb(N)[T / X]         = \symb(N) .
    eq \bot[T / X]             = \bot .
    eq \app(T1, T2)[T / X]     = \app(T1[T / X], T2[T / X]) .
    eq \imp(T1, T2)[T / X]     = \imp(T1[T / X], T2[T / X]) .
    eq \eq(T1, T2)[T / X]      = \eq(T1[T / X], T2[T / X]) .
    eq (T1 and T2)[T / X]      = (T1[T / X]) and (T2[T / X]) .
    eq (T1 or T2)[T / X]       = (T1[T / X]) or (T2[T / X]) .
    eq \not(T1) [T / X]        = \not(T1[T / X]) .
    eq \exists(X, T1) [T / X]  = \exists(X, T1) .
    ceq \exists(Y, T1) [T / X] = \exists(Y, T1[T / X]) if X =/= Y /\ not (Y in fv(T)) .

    sort Vars .
    subsort EVar < Vars .
    op .Vars :            -> Vars [ctor] .
    op _;_ : Vars Vars    -> Vars [ctor assoc comm id: .Vars prec 121] .

    vars Xs Vs Vs' A B : Vars .
    op \exists : Vars TermPattern     -> TermPattern . *** beware that this is not a term pattern!
    eq  \exists((X ; Xs), T1) [T / X] = \exists((X ; Xs), T1) .
    ceq \exists(Xs, T1) [T / X] = \exists(Xs, T1[T / X]) if not (X in Xs) .
    
    op rem : EVar Vars -> Vars [memo] .
    eq rem(X, (X ; Vs)) = rem(X, Vs) .
    eq rem(X, Vs) = Vs [owise] .

    op diff : Vars Vars -> Vars [memo] .
    eq diff(Vs, .Vars) = Vs .
    eq diff(Vs, (X ; Vs')) = diff(rem(X, Vs), Vs') .

    op vars : TermPattern -> Vars [memo] .
    eq vars(\evar(N))     = \evar(N) .
    eq vars(\symb(N))     = .Vars .
    eq vars(\bot)         = .Vars .
    eq vars(\app(T1, T2)) = vars(T1) ; vars(T2) .
    eq vars(\imp(T1, T2)) = vars(T1) ; vars(T2) .
    eq vars(T1 and T2)    = vars(T1) ; vars(T2) .
    eq vars(T1 or T2)     = vars(T1) ; vars(T2) .
    eq vars(\eq(T1, T2))  = vars(T1) ; vars(T2) .
    eq vars(\not(T))      = vars(T) .

    op fv : TermPattern   -> Vars [memo] .
    eq fv(\evar(N))       = \evar(N) .
    eq fv(\symb(N))       = .Vars .
    eq fv(\bot)           = .Vars .
    eq fv(\app(T1, T2))   = fv(T1) ; fv(T2) .
    eq fv(\imp(T1, T2))   = fv(T1) ; fv(T2) .
    eq fv(T1 and T2)      = fv(T1) ; fv(T2) .
    eq fv(T1 or T2)       = fv(T1) ; fv(T2) .
    eq fv(\eq(T1, T2))    = fv(T1) ; fv(T2) .
    eq fv(\not(T))        = fv(T) .
    eq fv(\exists(X, T))  = rem(X, fv(T)) .

    op sizeV : Vars -> Nat [memo] .
    eq sizeV(.Vars) = 0 .
    eq sizeV((X ; Vs)) = 1 + sizeV(Vs) .

    op _in_ :         EVar Vars -> Bool [memo] .
    eq (\evar(N)) in (\evar(N))  = true .
    ceq (\evar(N)) in (\evar(K)) = false if N =/= K .
    eq X in .Vars                = false .
    eq X in (A ; B)              = (X in A) or (X in B) .

    op isCompound : TermPattern -> Bool .
    eq isCompound(\app(F, T)) = true .
    eq isCompound(T) = false [owise] .

    op isFunctional : TermPattern -> Bool [memo] .
    eq isFunctional(\evar(N)) = true .
    eq isFunctional(\symb(N)) = true .
    eq isFunctional(\app(T1, T2))= isFunctional(T1) and isFunctional(T2) .
    eq isFunctional(T) = false [owise] .

    op check-functional-rec : TermPattern -> Bool [memo] .
    eq check-functional-rec(\imp(\eq(T1, T2) and Phi, \eq(\app(F, T1), \app(F', T2)))) =
        check-functional-rec(\imp(Phi, \eq(F, F'))) and isFunctional(F) and isFunctional(F')  .
    eq check-functional-rec(\imp(\eq(T1, T2), \eq(\app(F, T1), \app(F, T2)))) = isFunctional(F) .
    eq check-functional-rec(F) = false [owise] .

    op get-top-symbol : TermPattern -> TermPattern .
    eq get-top-symbol(\app(\symb(N), T)) = \symb(N) . 
    eq get-top-symbol(\app(F, T)) = get-top-symbol(F) .
endm

mod PROOF is
    pr SYNTAX .

    sort Proof .
    op .Proof :         -> Proof .
    op __ : Proof Proof -> Proof [assoc id: .Proof prec 45 format(d n d)] .

    sort ProofLine .
    subsort ProofLine < Proof .
    op `(_`)__; : NzNat TermPattern ProofRule -> ProofLine [prec 40 format(b! d d o d d n)] .

    sort ProofRule .
    op `[_,_,_`] : RuleName NzNat NzNat -> ProofRule .
    op `[_,_`]   : RuleName NzNat       -> ProofRule .
    op `[_`]     : RuleName             -> ProofRule .

    sort RuleName .
    --- FOL tautologies
    op tauto-context      :         -> RuleName . --- if phi -> phi' then psi and phi -> psi and phi'
    op tauto-imp-refl     :         -> RuleName . --- phi -> phi
    op tauto-imp-tranz    :         -> RuleName . --- if (phi1 -> phi) (phi -> phi2) then (phi1 -> phi2)
    op tauto-and-simpl    :         -> RuleName . --- phi and phi -> phi 
    op tauto-and-expand   :         -> RuleName . --- phi -> phi and phi
    op tauto-and-unit     :         -> RuleName . --- phi and true -> phi 
    op tauto-and-exp-unit :         -> RuleName . --- phi -> phi and true
    op tauto-and-bot      :         -> RuleName . --- phi and false -> false
    op tauto-bot-elim     :         -> RuleName . --- bot -> phi
    op and-eqv-intro      : Nat     -> RuleName . --- if phi1 <-> phi2 then (phi and phi1 <-> phi and phi2)
    op and-or-distr       :         -> RuleName . --- phi /\ phi1) or (phi /\ phi2)  <-> phi /\ (phi1 or phi2) 
    op eqv-or             : Nat Nat -> RuleName . --- if phi1 <-> phi2 and psi1 <-> psi2 then phi1 or psi1 <-> phi2 or psi2 
    op eqv-tranz          : Nat Nat -> RuleName . --- if phi1 <-> phi2 and  phi2 <-> phi3 then  phi1 <-> phi3
    op modus-ponens       : Nat Nat -> RuleName . --- modus ponens
	  
    --- equality
    op tauto-equality-id      : -> RuleName . --- phi = phi -> true 
    op tauto-equality-refl    : -> RuleName . --- true -> phi = phi
    op equality-symmetry      : -> RuleName . --- phi = phi' -> phi' = phi
    op equality-elimination   : -> RuleName . --- x = t and phi -> phi[t/x]
    op equality-introduction1 : -> RuleName . --- functional(t) /\ phi[t/x] -> x = t and phi

    --- TERM theory related rules
    op axiom-no-confusion-I  : -> RuleName . --- f == g -> \bot 
    op axiom-no-confusion-II : -> RuleName . --- f(t) = f(t') -> f = t'
    op axiom-term-eq-intro   : -> RuleName . --- t1 and t2 -> t1 and (t1 = t2) 
    op axiom-term-eq-elim    : -> RuleName . --- t1 and (t1 = t2) -> t1 and t2
    op axiom-functional      : -> RuleName . --- isFunctional(phi)
    op occurs-check          : -> RuleName . --- x == t -> \bot if x \in vars(t) and t is not vars
    op e-subst               : -> RuleName . --- exists z. t and z = u  <-> t[u/z] . 
    op e-gen                 : -> RuleName . ---- z = f(t1 .. tn)  <->  exists z1..zn . z = f(z1 .. zn) /\ (z1 = t1 /\ ... /\ zn = tn)

    --- antiunification only
    op e-context  : Nat -> RuleName . --- if phi2 <-> phi2' then exists x . phi /\ phi2 <-> exists x . phi /\ phi2'
    op e-scope    :     -> RuleName . --- exists x. phi1) /\ phi2   <->  exists x . (phi1 /\ phi2), x not in fv(phi2)
    op e-collapse :     -> RuleName . --- exists x.phi1) \/ (exists x.phi2) <-> exists x. (phi1 \/ phi2)
    op e-set      :     -> RuleName . --- exists X.\exists Y. phi <-> \exists X,Y . phi
endm


mod CHECKER is
    pr PROOF .

    vars X Y Y' Z : EVar .
    vars I I1 I2 N : NzNat .
    vars Xs : Vars .
    var L : ProofLine .
    vars Pr Pr' : ProofRule .
    vars Pi Pi' P P' P1 P2 P3 P4 : Proof .
    vars T1 T2 T Tp Tp' Tp1 Tp2 EQL EQR Sym1 Sym2 Sym F F' Phi Phi' : TermPattern .
    vars Args1 Args2 Args : TermPatternList .

    op check : Proof -> Bool .
    op _step-marker_ : Proof Proof -> Bool [format(g bn nr o)] .
    op _|-_ : Proof ProofLine -> Bool .
    eq check(Pi) = (.Proof step-marker Pi) .
    eq Pi step-marker .Proof = true .
    ceq Pi step-marker (L Pi') = (Pi L) step-marker Pi' if Pi |- L .

    *** checker rules
    ceq [tauto-context] : Pi |- (N) \imp(T and Tp1, T and Tp2) [tauto-context, I] ; = true
      if I < N /\ (I \imp(Tp1, Tp2) in Pi) .

    eq [tauto-imp-refl] : Pi |- (N) \imp(Tp, Tp) [tauto-imp-refl] ; = true .

    ceq [tauto-imp-tranz] : Pi |- (N) \imp(Tp1, Tp2) [tauto-imp-tranz, I1, I2] ; = true
      if I1 < N /\ I2 < N /\
         (P1 ((I1) \imp(Tp1, T) Pr  ;) P2) := Pi /\ 
         (P3 ((I2) \imp(T, Tp2) Pr' ;) P4) := Pi .

    eq [tauto-and-simpl] : Pi |- (N) \imp(T and T, T) [tauto-and-simpl] ; = true .

    eq [tauto-and-expand] : Pi |- (N) \imp(T, T and T) [tauto-and-expand] ; = true .

    eq [tauto-and-unit] : Pi |- (N) \imp(Tp and \imp(\bot, \bot), Tp) [tauto-and-unit] ; = true .

    eq [tauto-and-exp-unit] : Pi |- (N) \imp(Tp, Tp and \imp(\bot, \bot)) [tauto-and-exp-unit] ; = true .

    eq [tauto-and-bot] : Pi |- (N) \imp(Tp and \bot, \bot) [tauto-and-bot] ; = true .

    eq [tauto-bot-elim] : Pi |- (N) \imp(\bot, Tp) [tauto-bot-elim] ; = true .

    ceq [and-eqv-intro] : Pi |- (N) \eqv(Phi and Tp1, Phi and Tp2) [and-eqv-intro(I)] ; = true 
      if I < N /\ I \eqv(Tp1, Tp2) in Pi .

    ceq [and-eqv-intro] : Pi |- (N) \eqv(Tp1, Tp2) [and-eqv-intro(I)] ; = true 
      if I < N /\ I \eqv(Tp1, Tp2) in Pi . *** avoid matching issue

    eq [and-or-distr]: Pi |- (N) \eqv((Phi and Tp1) or (Phi and Tp2), Phi and (Tp1 or Tp2)) [and-or-distr] ; = true .

    ceq [eqv-or] : Pi |- (N) \eqv(Tp or Phi, Tp' or Phi') [eqv-or(I1,I2)] ; = true  
      if I1 < N /\ I2 < N /\
          (P1 ((I1) \eqv(Tp, Tp') Pr  ;) P2) := Pi /\ 
          (P3 ((I2) \eqv(Phi, Phi') Pr' ;) P4) := Pi .

    ceq [eqv-tranz] : Pi |- (N) \eqv(Tp1, Tp2) [eqv-tranz(I1,I2)] ; = true  
      if I1 < N /\ I2 < N /\
          (P1 ((I1) \eqv(Tp1, T) Pr  ;) P2) := Pi /\ 
          (P3 ((I2) \eqv(T, Tp2) Pr' ;) P4) := Pi .

    ceq [modus-ponens] : Pi |- (N) Tp2 [modus-ponens(I1, I2)] ; = true
      if I1 < N /\ I2 < N /\
	  (P1 ((I1) Tp1 Pr  ;) P2) := Pi /\
	  (I2 \eqv(Tp1, Tp2) in Pi) .

    
    eq [tauto-equality-id] : Pi |- (N) \imp(\eq(Tp, Tp), \imp(\bot, \bot)) [tauto-equality-id] ; = true .

    eq [tauto-equality-refl] : Pi |- (N) \imp(\imp(\bot, \bot), \eq(Tp, Tp)) [tauto-equality-refl] ; = true .

    eq [equality-symmetry] : Pi |- (N) \imp(\eq(Tp, Tp'), \eq(Tp', Tp)) [equality-symmetry] ; = true .

    ceq [equality-elimination] : Pi |- (N) \imp((\eq(X,T)) and Tp, Tp') [equality-elimination] ; = true
      if Tp' ==  Tp[T / X] .

    ceq [equality-introduction1] : Pi |- (N) \imp(Tp', (\eq(X,T)) and Tp) [equality-introduction1] ; = true
      if Tp' ==  Tp[T / X] /\ isFunctional(T) /\ not(X in vars(T)) .

    ceq [axiom-no-confusion-I] : Pi |- (N) \imp(\eq(Tp1, Tp2), \bot) [axiom-no-confusion-I] ; = true
      if isFunctional(Tp1) /\ isFunctional(Tp2) /\ not(get-top-symbol(Tp1) == get-top-symbol(Tp2)) .

    ceq [axiom-no-confusion-II] : Pi |- (N) \imp(Tp1, Tp2) [axiom-no-confusion-II] ; = true
      if check-functional-rec(\imp(Tp2, Tp1)) .

    eq [axiom-term-eq-intro] : Pi |- (N) \imp(Tp1 and Tp2, Tp1 and \eq(Tp1, Tp2)) [axiom-term-eq-intro] ; = true .
    eq [axiom-term-eq-elim]  : Pi |- (N) \imp(Tp1 and \eq(Tp1, Tp2), Tp1 and Tp2) [axiom-term-eq-elim] ; = true .

    ceq [axiom-functional] : Pi |- (N) Phi [axiom-functional] ; = true if check-functional-rec(Phi) .

    ceq [oc] : Pi |- (N) \imp(\eq(X, Tp), \bot) [occurs-check] ; = true
      if X in vars(Tp) /\ isCompound(Tp) .

    ceq [e-subst] : Pi |- (N) \exists(X, \eqv(Tp and \eq(X,Tp1), Tp2)) [e-subst] ; = true 
      if Tp2 == (Tp[Tp1 / X]) . 

    ceq [e-gen] : Pi |- (N) \eqv(\eq(Z, T1), \exists(Xs, \eq(Z, T) and EQL)) [e-gen] ; = true 
      if isFunctional(T1) /\ isFunctional(T) /\
         (Sym1, Args1) := destruct(T1) /\
         (Sym, Args) := destruct(T) /\
         Sym1 == Sym /\
         Xs == vars(T) /\
         sizeV(Xs) == size(Args) /\ 
         sizeV(Xs) == size(Args1) /\ 
         EQL == zipAnd(Args, Args1) /\
         noneIn(Xs, vars(T1)) .

    ceq [e-context] : Pi |- (N) \eqv(\exists(Xs, Phi and Tp1),\exists(Xs, Phi and Tp2)) [e-context(I1)] ; = true 
       if I1 < N /\ I1 \eqv(Tp1, Tp2) in Pi .
    ceq [e-intro] : Pi |- (N) \eqv(\exists(Xs, Tp1),\exists(Xs, Tp2)) [e-context(I1)] ; = true 
      if I1 < N /\ I1 \eqv(Tp1, Tp2) in Pi .

    ceq [e-scope] : Pi |- (N) \eqv(\exists(Xs, Tp1) and Tp2,\exists(Xs, Tp1 and Tp2)) [e-scope] ; = true 
       if noneIn(Xs, vars(Tp2)) .
    ceq [e-scope] : Pi |- (N) \eqv(\eqv(\exists(Xs, Tp1), Tp2),\exists(Xs, \eqv(Tp1, Tp2))) [e-scope] ; = true 
       if noneIn(Xs, vars(Tp2)) .
    eq [e-scope] : Pi |- (N) \eqv(\exists(Xs, Tp1),\exists(Xs, Tp1)) [e-scope] ; = true . --- avoid matching issue


    
    eq [e-collapse] : Pi |- (N) \eqv(\exists(Xs, Tp1) or \exists(Xs, Tp2), \exists(Xs, Tp1 or Tp2)) [e-collapse] ; = true .
    

    eq [e-set] : Pi |- (N) \eqv(\exists(Xs, \exists(Ys, Phi)), \exists((Xs ; Ys), Phi)) [e-set] ; = true .

    --- helpers
    op __in_ : NzNat TermPattern Proof -> Bool .
    eq N Tp in (P ((N) Tp Pr ;) P') = true .
    eq N Tp in Pi = false [owise] .

    sort TermPatternList .
    subsort TermPattern < TermPatternList .
    op .TPList : -> TermPatternList .
    op _,,_ : TermPatternList TermPatternList -> TermPatternList [assoc id: .TPList] .
    op size : TermPatternList -> Nat .
    eq size(.TPList) = 0 .
    eq size((Tp ,, TPL2)) = 1 + size(TPL2) .

    sort SymArgs .
    op (_,_) : TermPattern TermPatternList -> SymArgs .
    op destruct : TermPattern -> SymArgs .
    eq destruct(\app(\symb(N), T)) = (\symb(N), T) .
    ceq destruct(\app(\app(T1, T2), T)) = (Sym, (Args ,, T) ) 
      if (Sym, Args) := destruct(\app(T1, T2)) .

    vars TPL1 TPL2 : TermPatternList .
    op zipAnd : TermPatternList TermPatternList -> TermPattern .
    eq zipAnd((T1 ,, .TPList), (T2 ,, .TPList)) = \eq(T1, T2) .
    eq zipAnd((T1 ,, TPL1), (T2 ,, TPL2)) = \eq(T1, T2) and zipAnd(TPL1, TPL2) . *** maude executes eq in order

    vars Ys : Vars .
    op noneIn : Vars Vars -> Bool .
    eq noneIn(.Vars, Xs) = true .
    eq noneIn ( (X ; Xs), (Ys)) = (not (X in Ys)) and noneIn(Xs, Ys) .

endm
