load checker

mod SETUP is
    pr PROOF .
    pr INT .

    sorts Pair Pairs .
    subsorts Pair < Pairs .
    op .Pairs : -> Pairs .
    op __ : Pairs Pairs -> Pairs [assoc prec 120 id: .Pairs] .
    op _⊔_ : TermPattern TermPattern -> Pair .

    var Pr : Pair .
    op size : Pairs -> Nat .
    eq size(.Pairs) = 0 .
    eq size(Pr) = 1 .
    ceq size((P P')) = size(P) + size(P') if P =/= .Pairs /\ P' =/= .Pairs .

    sort MaybePairs .
    op nothing : -> MaybePairs .
    op just_ : Pairs -> MaybePairs .
    op _;_ : MaybePairs MaybePairs -> MaybePairs .
    vars M : MaybePairs .
    vars P P' : Pairs .
    eq nothing ; M = nothing .
    eq M ; nothing = nothing .
    eq just P ; just P' = just (P P') .

    vars N N' I J : Nat .
    vars T T' F F' : TermPattern .
    op dec-reverse : TermPattern TermPattern -> MaybePairs .
    ceq dec-reverse(\app(\symb(N), T), \app(\symb(N'), T')) = nothing if N =/= N' .
    eq dec-reverse(\app(\symb(N), T), \app(\symb(N), T')) = just (T ⊔ T') .
    eq dec-reverse(\app(F, T), \app(F', T')) = dec-reverse(F, F') ; just (T ⊔ T') .
    eq dec-reverse(T, T') = nothing [owise] .

    sorts SubstPair SubstList .
    op subst-pair : EVar TermPattern -> SubstPair .
    op subst-cons : SubstPair SubstList -> SubstList .
    op subst-nil : -> SubstList .

    op collapse : SubstList -> SubstPair .
    vars X Y : EVar .
    vars Phi Phi' T1 T2 : TermPattern .
    var PR : SubstPair .
    var PL : SubstList .
    eq collapse(subst-cons(PR, subst-nil)) = PR .

    eq collapse(subst-cons(subst-pair(Y, Phi), subst-cons(subst-pair(X, Phi'), PL))) =
       collapse(subst-cons(subst-pair(X, (Phi' [ Phi / Y ])), PL)) .

    sorts Equation Equations .
    subsort Equation < Equations .
    op .Equations : -> Equations .
    op _={_}_ : TermPattern EVar TermPattern -> Equation .
    op __ : Equations Equations -> Equations [assoc comm prec 120 id: .Equations] .

    op fresh : EVar -> EVar .
    eq fresh(\evar(N)) = \evar(N + 1) .

    sort GenVars .
    vars Vs : Vars .
    op (_,_) : Vars Nat -> GenVars .
    op generate-vars : Nat Int -> GenVars .
    eq generate-vars(I, 0) = (.Vars, I) .
    ceq generate-vars(I, N) = ((\evar(I + 1) ; Vs), N') if (Vs, N') := generate-vars(I + 1, N - 1) .

    vars Eq : Equation .
    vars Eqs1 Eqs2 : Equations .
    op solved : Equations -> Bool .
    eq solved(.Equations) = true .
    ceq solved(T1 ={ X } T2) = true if dec-reverse(T1, T2) == nothing .
    ceq solved((Eqs1 Eqs2)) = solved(Eqs1) and solved(Eqs2) if (Eqs1 =/= .Equations and Eqs2 =/= .Equations) .
    eq solved(Eqs1) = false [owise] .

endm

mod ANTI-UNIFICATION is
    pr SETUP .

    sort AUnifProblem .
    op <_|_|_> : SubstList Equations Nat -> AUnifProblem .
    
    sort Trace .
    subsort AUnifProblem < Trace .
    op .Trace : -> Trace .
    op end    : -> Trace .
    op _;;_ : Trace Trace -> Trace [assoc prec 121 id: .Trace] .

    vars Ss : SubstList .
    vars Eqs Eqs' : Equations .
    vars E : Equation .
    vars T1 T2 T Trm : TermPattern .
    vars N NextId : Int .
    vars X : EVar .
    vars Vs : Vars .
    vars Tr : Trace .
    vars Ps : Pairs .

    crl [decomposition] : Tr ;; < Ss | T1 ={ X } T2 Eqs | N > ;; end =>
                          Tr ;; < Ss | T1 ={ X } T2 Eqs | N > ;; < subst-cons(subst-pair(X, Trm), Ss) | Eqs' Eqs | NextId > ;; end
      if  just Ps := dec-reverse(T1, T2) /\
          (Vs, NextId) := generate-vars(N, size(Ps)) /\
          Trm := generate-term(Vs, get-top-symbol(T1)) /\
          Eqs' := eqs-build(Vs, Ps) .

    op eqs-build : Vars Pairs -> Equations .
    eq eqs-build(.Vars, .Pairs) = .Equations .
    eq eqs-build((X ; Vs), (( T1 ⊔ T2) Ps)) = (T1 ={ X } T2) eqs-build(Vs, Ps) .

    op generate-term : Vars TermPattern -> TermPattern .
    eq generate-term(.Vars, T) = T .
    eq generate-term((X ; Vs), T) = generate-term(Vs, \app(T, X)) .
endm

mod PROOF-GENERATION is
    pr SETUP .
    pr ANTI-UNIFICATION .
    pr CHECKER .


    vars Eqs Eqs' Eqs1 Eqs2 : Equations .
    vars N N' : Nat .
    vars SL : SubstList .
    vars Phi Phi' T T1 T2 Trm Trm' EQL EQR TP TP' INIT TP1 TP2 : TermPattern .
    vars X Y Z : EVar .
    vars Vs NewVs : Vars .
    vars Ps : Pairs .
    vars I K NewK Id Index : Int .
    vars Prf DecProof : Proof .
    

    sort Result .
    op {_,_,_} : Proof Nat TermPattern -> Result .

    op process : AUnifProblem AUnifProblem TermPattern TermPattern Nat TermPattern TermPattern -> Result .


    *** K Phi Phi' Z T1 T2 Trm EQL EQR NewVs
    sort OptionalProof .
    op {_,_} : Proof Nat -> OptionalProof . 
    op dec-proof : Int TermPattern TermPattern EVar TermPattern TermPattern TermPattern TermPattern TermPattern Vars -> OptionalProof .
    *** eq dec-proof(K, Phi, Phi', Z, T1, T2, Trm, EQL, EQR, NewVs) = 
    ***         { (K) \eqv((Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2)), 
    ***                    \exists(NewVs, \eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]) )) [e-gen]; 
    ***           , K } . 

    eq dec-proof(K, Phi, Phi', Z, T1, T2, Trm, EQL, EQR, NewVs) = 
            {
              (K) \eqv(\eq(Z, T1), \exists(NewVs, \eq(Z, Trm) and EQL)) [e-gen]; 
              (K + 1) \eqv(Phi and \eq(Z, T1), Phi and \exists(NewVs, \eq(Z, Trm) and EQL)) [and-eqv-intro(K)];
              (K + 2) \eqv(Phi and \exists(NewVs, \eq(Z, Trm) and EQL),
                           \exists(NewVs, Phi and \eq(Z, Trm) and EQL)) [e-scope];
              (K + 3) \eqv(Phi and \eq(Z, T1), \exists(NewVs, Phi and \eq(Z, Trm) and EQL)) [eqv-tranz(K + 1, K + 2)];

              (K + 4) \eqv(\eq(Z, T2), \exists(NewVs, \eq(Z, Trm) and EQR)) [e-gen]; 
              (K + 5) \eqv(Phi' and \eq(Z, T2), Phi' and \exists(NewVs, \eq(Z, Trm) and EQR)) [and-eqv-intro(K + 4)];
              (K + 6) \eqv(Phi' and \exists(NewVs, \eq(Z, Trm) and EQR),
                           \exists(NewVs, Phi' and \eq(Z, Trm) and EQR)) [e-scope];
              (K + 7) \eqv(Phi' and \eq(Z, T2), \exists(NewVs, Phi' and \eq(Z, Trm) and EQR)) [eqv-tranz(K + 5, K + 6)];

              (K + 8) \eqv( (Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2)) ,
                             \exists(NewVs, Phi and \eq(Z, Trm) and EQL) or  \exists(NewVs, Phi' and \eq(Z, Trm) and EQR)) [eqv-or(K + 3, K + 7)];

              (K + 9) \eqv(\exists(NewVs, Phi and \eq(Z, Trm) and EQL) or  \exists(NewVs, Phi' and \eq(Z, Trm) and EQR), 
                           \exists(NewVs, (Phi and \eq(Z, Trm) and EQL) or  (Phi' and \eq(Z, Trm) and EQR)) ) [e-collapse]; 


              (K + 10) \eqv( (Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2)) ,
                             \exists(NewVs, (Phi and \eq(Z, Trm) and EQL) or  (Phi' and \eq(Z, Trm) and EQR)) ) [eqv-tranz(K + 8, K + 9)]; 

              (K + 11) \eqv( (Phi and \eq(Z, Trm) and EQL) or  (Phi' and \eq(Z, Trm) and EQR),
                            \eq(Z, Trm) and ((Phi and EQL) or (Phi' and EQR))) [and-or-distr];

              (K + 12) \eqv( \exists(NewVs, (Phi and \eq(Z, Trm) and EQL) or  (Phi' and \eq(Z, Trm) and EQR)),
                             \exists(NewVs, \eq(Z, Trm) and ((Phi and EQL) or (Phi' and EQR)))) [e-context(K + 11)];

              (K + 13) \eqv( (Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2)) ,
                             \exists(NewVs, \eq(Z, Trm) and ((Phi and EQL) or (Phi' and EQR)))) [eqv-tranz(K + 10, K + 12)];

              , K + 13 } . 
    

    ceq process(
          < SL | Eqs T1 ={ Z } T2 | N > ,
          < subst-cons(subst-pair(Z, Trm), SL) | Eqs Eqs' | N' > ,
          TP, INIT, Index, TP1, TP2) = {
          (
            DecProof 
            (K + 1) \eqv(\exists(vars(Trm'), (Trm' and ((Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2))))), 
                         \exists(vars(Trm'), (Trm' and \exists(NewVs, \eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]) )))) [e-context(K)];
            (K + 2) \eqv( Trm' and \exists(NewVs, \eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]) ),
                         \exists(NewVs, Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) ) [e-scope];

            (K + 3) \eqv(\exists(vars(Trm'), Trm' and \exists(NewVs, \eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]) )),
                         \exists(vars(Trm'), \exists(NewVs, Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])))) ) [e-context(K + 2)];
            (K + 4) \eqv(\exists(vars(Trm'), \exists(NewVs, Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])))),
                         \exists((vars(Trm') ; NewVs), Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) ) [e-set];
            (K + 5) \eqv(\exists(vars(Trm'), Trm' and \exists(NewVs, \eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]) )),
                         \exists((vars(Trm') ; NewVs), Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) ) [eqv-tranz(K + 3, K + 4)];

            (K + 6) \eqv( \exists(Z, (Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])),
                          \exists(Z, Trm' and \eq(Z,Trm)) and  (((Phi and EQL) or (Phi' and EQR))[Trm / Z])) [e-scope];

            (K + 7) \eqv( \exists(rem(Z, (NewVs ; vars(Trm'))), \exists(Z, (Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))),
                          \exists(rem(Z, (NewVs ; vars(Trm'))), \exists(Z, Trm' and \eq(Z,Trm)) and  (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [e-context(K + 6)];
            (K + 8) \eqv( \exists(rem(Z, (NewVs ; vars(Trm'))), \exists(Z, (Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))), 
                          \exists( (rem(Z, (NewVs ; vars(Trm'))) ; Z), (Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [e-set];
            
            (K + 9) \eqv (\exists( (rem(Z, (NewVs ; vars(Trm'))) ; Z), (Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])),
                          \exists(rem(Z, (NewVs ; vars(Trm'))), \exists(Z, Trm' and \eq(Z,Trm)) and  (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [eqv-tranz(K + 8, K + 7)];


            (K + 10) \exists(Z, \eqv(Trm' and \eq(Z,Trm) , Trm'[Trm / Z])) [e-subst];
	    (K + 11) \eqv(\exists(Z, \eqv(Trm' and \eq(Z,Trm) , Trm'[Trm / Z])), \eqv(\exists(Z, Trm' and \eq(Z,Trm)) , Trm'[Trm / Z])) [e-scope];
            (K + 12) \eqv(\exists(Z, Trm' and \eq(Z,Trm)) , Trm'[Trm / Z]) [modus-ponens(K + 10, K + 11)];
	    

            (K + 13) \eqv(\exists(NewVs, \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])), 
                         \exists(NewVs, (Trm'[Trm / Z])                 and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))  ) [e-context(K + 12)];


            (K + 14) \eqv(\exists(rem(Z, vars(Trm')), \exists(NewVs, \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))), 
                          \exists(rem(Z, vars(Trm')), \exists(NewVs, (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])))  ) [e-context(K + 13)];


            (K + 15) \eqv(\exists(rem(Z, vars(Trm')), \exists(NewVs, \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))), 
                          \exists((rem(Z, vars(Trm')) ; NewVs), \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [e-set];

            (K + 16) \eqv(\exists(rem(Z, vars(Trm')), \exists(NewVs, (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))),
                          \exists((rem(Z, vars(Trm')) ; NewVs), (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])) ) [e-set];

            (K + 17) \eqv(\exists((rem(Z, vars(Trm')) ; NewVs), \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])),
                          \exists(rem(Z, vars(Trm')), \exists(NewVs, (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])))) [eqv-tranz(K + 15, K + 14)];

            (K + 18) \eqv(\exists((rem(Z, vars(Trm')) ; NewVs), \exists(Z, Trm' and \eq(Z,Trm)) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])),
                          \exists((rem(Z, vars(Trm')) ; NewVs), (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])) ) [eqv-tranz(K + 17, K + 16)];


            (K + 19) \eqv(\exists(vars(Trm'), (Trm' and ((Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2))))), 
                          \exists((vars(Trm') ; NewVs), Trm' and (\eq(Z,Trm) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) ) [eqv-tranz(K + 1, K + 5)];

            (K + 20) \eqv(\exists(vars(Trm'), (Trm' and ((Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2))))), 
                          \exists(rem(Z, (NewVs ; vars(Trm'))), \exists(Z, Trm' and \eq(Z,Trm)) and  (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [eqv-tranz(K + 19, K + 9)];


            (K + 21) \eqv(\exists(vars(Trm'), (Trm' and ((Phi and \eq(Z, T1)) or (Phi' and \eq(Z, T2))))), 
                          \exists((rem(Z, vars(Trm')) ; NewVs), (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z]))) [eqv-tranz(K + 18, K + 20)];

            (K + 22) \eqv(TP1 or TP2 ,
                          \exists((rem(Z, vars(Trm')) ; NewVs), (Trm'[Trm / Z]) and (((Phi and EQL) or (Phi' and EQR))[Trm / Z])) ) [eqv-tranz(Index - 1, K + 21)];
          ),
             K + 23, T }
      if subst-pair(Y, Trm') := collapse(SL) /\
          Vs := vars(Trm') /\
          NewVs := vars(Trm) /\ 
          Phi := phi-left(Eqs) /\
          Phi' := phi-right(Eqs) /\
          EQL := phi-left(Eqs') /\
          EQR := phi-right(Eqs') /\
          {DecProof, K} := dec-proof(Index, Phi, Phi', Z, T1, T2, Trm, EQL, EQR, NewVs) /\
          T := prec(NewVs, prec(rem(Z, Vs), ((Trm' and ((Phi and EQL) or (Phi' and EQR)))[Trm / Z]) )) .
      

    op get-eqs : AUnifProblem -> Equations .
    eq get-eqs(< SL | Eqs | K >) = Eqs .

    op phi-left : Equations -> TermPattern .
    eq phi-left(.Equations) =  \imp(\bot, \bot) .
    eq phi-left(T1 ={ X } T2) = \eq(X, T1) .
    ceq phi-left((Eqs1 Eqs2)) = phi-left(Eqs1) and phi-left(Eqs2)
      if Eqs1 =/= .Equations /\ Eqs2 =/= .Equations .

    op phi-right : Equations -> TermPattern .
    eq phi-right(.Equations) =  \imp(\bot, \bot) .
    eq phi-right(T1 ={ X } T2) = \eq(X, T2) .
    ceq phi-right((Eqs1 Eqs2)) = phi-right(Eqs1) and phi-right(Eqs2)
      if Eqs1 =/= .Equations /\ Eqs2 =/= .Equations .

    op prec : Vars TermPattern -> TermPattern .
    eq prec(.Vars, T) = T .
    eq prec((X ; Vs), T) = prec(Vs, \exists(X, T)) .

    eq \imp(\bot, \bot) and T = T .


    vars A1 A2 : AUnifProblem .
    vars Tr : Trace .

    op process-trace : Trace TermPattern TermPattern Nat TermPattern TermPattern -> Proof .
    ceq process-trace((A1 ;; A2 ;; Tr), TP, Phi, K, T1, T2) = Prf process-trace((A2 ;; Tr), TP', Phi, NewK, T1, T2) 
        if { Prf, NewK, TP' } := process(A1, A2, TP, Phi, K, T1, T2)  .
    eq process-trace((A1 ;; end), TP, Phi, K, T1, T2) = .Proof .

    
    op gen-proof : TermPattern TermPattern -> Proof .

    crl gen-proof(T1, T2) =>
        (1) \exists(Z, \eqv(T1, Z and \eq(Z, T1))) [e-subst];
        (2) \eqv(\exists(Z, \eqv(T1, Z and \eq(Z, T1))), \eqv(T1, \exists(Z, Z and \eq(Z, T1)))) [e-scope];
        (3) \eqv(T1, \exists(Z, Z and \eq(Z, T1))) [modus-ponens(1,2)];
        (4) \exists(Z, \eqv(T2, Z and \eq(Z, T2))) [e-subst];
        (5) \eqv(\exists(Z, \eqv(T2, Z and \eq(Z, T2))), \eqv(T2, \exists(Z, Z and \eq(Z, T2)))) [e-scope];
        (6) \eqv(T2, \exists(Z, Z and \eq(Z, T2))) [modus-ponens(4,5)];
        (7) \eqv(T1 or T2, \exists(Z, Z and \eq(Z, T1)) or \exists(Z, Z and \eq(Z, T2))) [eqv-or(3,6)];
        (8) \eqv(\exists(Z, Z and \eq(Z, T1)) or \exists(Z, Z and \eq(Z, T2)), \exists(Z,  (Z and \eq(Z, T1)) or (Z and \eq(Z, T2)))) [e-collapse];
        (9) \eqv((Z and \eq(Z, T1)) or (Z and \eq(Z, T2)), Z and (\eq(Z, T1) or \eq(Z, T2))) [and-or-distr];
        (10) \eqv(\exists(Z, (Z and \eq(Z, T1)) or (Z and \eq(Z, T2))), \exists(Z, Z and (\eq(Z, T1) or \eq(Z, T2)))) [e-context(9)];
        (11) \eqv(T1 or T2, \exists(Z,  (Z and \eq(Z, T1)) or (Z and \eq(Z, T2)))) [eqv-tranz(7,8)];
        (12) \eqv(T1 or T2, \exists(Z, Z and (\eq(Z, T1) or \eq(Z, T2)))) [eqv-tranz(11,10)];
        process-trace((Tr  ;; A2 ;; end), Phi, T1 or T2, 13, T1, T2)
      if  I := freshid(T1, T2) /\ Z := \evar(I) /\
          Phi := \exists(Z, Z and (\eq(Z, T1) or \eq(Z, T2))) /\ 
          < subst-cons(subst-pair(Z, Z), subst-nil) | T1 ={ Z } T2 | I + 2 > ;; end => (Tr ;; A2 ;; end) /\
          solved(get-eqs(A2)) .
    

    op last : Trace -> AUnifProblem .
    eq last((A1 ;; end)) = A1 .
    eq last((A1 ;; Tr)) = last(Tr) .

    op freshid : TermPattern TermPattern -> Int .
    eq freshid(T1, T2) = max((vars(T1) ; vars(T2)), 1) + 1 .

    op max : Vars Int -> Int .
    eq max(.Vars, Id) = Id .
    ceq max((\evar(Id) ; Vs), I) = max(Vs, I) if I >= Id .
    ceq max((\evar(Id) ; Vs), I) = max(Vs, Id) if I < Id .
endm
